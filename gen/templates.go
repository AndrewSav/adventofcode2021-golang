package main

type runDataPart struct {
	Part    int
	Variant string
}

type runDataElement struct {
	Day   int
	Parts []runDataPart
}

type runData struct {
	Days          []runDataElement
	LatestDay     int
	LatestPart    int
	LatestVariant string
}

const (
	runTemplate = `// Code generated by 'go run ./gen'; DO NOT EDIT
package main

import (
{{- range $d := .Days }}
	"aoc2021/day{{ printf "%02d" $d.Day }}"
{{- end }}
	"aoc2021/util"
	"log"
)

func run(day, part int, variant string, inputFile string) (string, int, int, string) {
	switch day {
{{- range $d := .Days }}
	case {{ $d.Day }}:
		switch {
{{- range $p := $d.Parts }}
		case part == {{ $p.Part }} && variant == "{{ $p.Variant }}":
			return day{{ printf "%02d" $d.Day }}.Part{{ $p.Part }}{{ $p.Variant }}(inputFile), day, part, variant
{{- end}}
		default:
			log.Fatalf("Unknown part %d on day %d, variant '%s'", part, day, variant)
		}
{{- end}}
	default:
		log.Fatalf("Unknown  day %d", day)
	}
	panic("unexpected code path")
}

func getRunAll() (result []func() (string, int, int, string)) {
{{- range $d := .Days }}
{{- range $p := $d.Parts }}
	result = append(result, func() (string, int, int, string) { return run({{ $d.Day }}, {{ $p.Part }}, "{{ $p.Variant }}", util.GetDefautInputFilePath({{ $d.Day }}))})
{{- end }}
{{- end }}
	return
}

func getLatest() (day int, part int, variant string) {
	day = {{ .LatestDay }}
	part = {{ .LatestPart }}
	variant = "{{ .LatestVariant }}"
	return
}
`
)
